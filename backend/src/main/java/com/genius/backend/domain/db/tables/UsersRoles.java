/*
 * This file is generated by jOOQ.
 */
package com.genius.backend.domain.db.tables;


import com.genius.backend.domain.db.Genius;
import com.genius.backend.domain.db.Indexes;
import com.genius.backend.domain.db.Keys;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRoles extends TableImpl<Record> {

    private static final long serialVersionUID = -16222510;

    /**
     * The reference instance of <code>genius.USERS_ROLES</code>
     */
    public static final UsersRoles USERS_ROLES = new UsersRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>genius.USERS_ROLES.ID</code>.
     */
    public final TableField<Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>genius.USERS_ROLES.USER_ID</code>.
     */
    public final TableField<Record, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>genius.USERS_ROLES.ROLE_ID</code>.
     */
    public final TableField<Record, Integer> ROLE_ID = createField("ROLE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>genius.USERS_ROLES</code> table reference
     */
    public UsersRoles() {
        this(DSL.name("USERS_ROLES"), null);
    }

    /**
     * Create an aliased <code>genius.USERS_ROLES</code> table reference
     */
    public UsersRoles(String alias) {
        this(DSL.name(alias), USERS_ROLES);
    }

    /**
     * Create an aliased <code>genius.USERS_ROLES</code> table reference
     */
    public UsersRoles(Name alias) {
        this(alias, USERS_ROLES);
    }

    private UsersRoles(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private UsersRoles(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UsersRoles(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, USERS_ROLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Genius.GENIUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_ROLES_PRIMARY, Indexes.USERS_ROLES_USER_ID_USER_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_USERS_ROLES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_USERS_ROLES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_USERS_ROLES_PRIMARY, Keys.KEY_USERS_ROLES_USER_ID_USER_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRoles as(String alias) {
        return new UsersRoles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRoles as(Name alias) {
        return new UsersRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersRoles rename(String name) {
        return new UsersRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersRoles rename(Name name) {
        return new UsersRoles(name, null);
    }
}
